"""
    find_all_admissible_expansions(
        basis::AbstractVector{<:AbstractVector{<:Integer}}
        basis_occupations::AbstractVector{<:Integer},
        occupation::Integer,
        constraints::AbstractVector{<:Integer},
        idxs::AbstractVector{<:Integer};
        basis_idxs = eachindex(basis),
        maxdepth = div(occupation, minimum(basis_occupations), RoundDown)
        )

Given a basis of vectors `basis` ``= [ùêß‚ÇÅ, ùêß‚ÇÇ, ...]`` with associated non-negative, integer
"occupations" `basis_occupations` ``= [Œº‚ÇÅ, Œº‚ÇÇ, ...]``, find *all* admissible expansion
coefficients ``{ùêú‚Å±} = {[c‚ÇÅ‚Å±, c‚ÇÇ‚Å±, ...]}`` and associated expansions

``c‚ÇÅ‚Å±ùêß‚ÇÅ + c‚ÇÇ‚Å±ùêß‚ÇÇ + ... = ùêß``

such that ``ùêß`` satisfies the constraints:

1. *occupation constraint*:  each expansion's total occupation ``Œº`` is exactly equal to
   `occupation` (i.e., satisfies a linear Diophantine equation):

``c‚ÇÅ‚Å±Œº‚ÇÅ + c‚ÇÇ‚Å±Œº‚ÇÇ + ... = Œº``

2. *symmetry constraint*: each expansion satisfies a set of non-negative, integer
   constraints specified by `constraints`, s.t.:

``(ùêß = c‚ÇÅùêß‚ÇÅ·¥¥ + c‚ÇÇùêß‚ÇÇ·¥¥ + ...)```[idxs][j]` ``‚â•`` `constraints[j]`

for all `j ‚àà eachindex(constraints)`.

# Keyword arguments
- `basis_idxs`: Optionally, if the caller wants to restrict the expansion to a subset of the
  bases in `basis`, the argument `basis_idxs` can provide an indexing into allowable
  elements of `basis`.
- `maxdepth`: include at most `maxdepth` basis vectors, counted with multiplicity (see
  Implementation notes below).

# Implementation
Recursion is used to build a nested set of for loops, of depth `maxdepth`, corresponding 
to the inclusion of at most `maxdepth` basis vectors (this limits the maximum meaningful 
value of `maxdepth` to `div(Œº, minimum(Œº‚±º), RoundDown)`; its default value). 
"""
function find_all_admissible_expansions(
        basis::AbstractVector{<:AbstractVector{<:Integer}},
        basis_occupations::AbstractVector{<:Integer},
        occupation::Integer,
        constraints::AbstractVector{<:Integer},
        idxs::AbstractVector{<:Integer};
        basis_idxs = eachindex(basis),
        maxdepth = div(occupation, minimum(basis_occupations), RoundDown)
    )

    occupation > 0 || throw(DomainError(occupation, "must be positive"))

    c‚Å±s = Vector{Int}[] # solution vector storage
    constraints‚Ä≤ = similar(constraints) # buffer
    _constrained_expansions!(
        c‚Å±s, constraints‚Ä≤, (), occupation, constraints, basis_occupations, basis, idxs, 
        1, length(basis_idxs), 1, maxdepth, basis_idxs)
end
function _constrained_expansions!(
            c‚Å±s, constraints‚Ä≤, ijks, occupation, constraints, basis_occupations, basis,
            idxs, startidx, stopidx, depth, maxdepth, basis_idxs)
    depth > maxdepth && return c‚Å±s
    for idx·µ¢ in startidx:stopidx
        i = idxs[idx·µ¢]
        Œº = test_expansion_add_if_valid!(c‚Å±s, constraints‚Ä≤, (ijks...,i), occupation, 
                constraints, basis_occupations, basis, idxs)
        Œº ‚â• occupation && continue # matched/overflowed occupation-constraint; no more to add

        # did not yet match/overflow filling constraint: add more Hilbert basis vectors
        _constrained_expansions!(
            c‚Å±s, constraints‚Ä≤, (ijks...,i), occupation, constraints, basis_occupations,
            basis, idxs, idx·µ¢, stopidx, depth+1, maxdepth, basis_idxs)
    end
    return c‚Å±s
end

function test_expansion_add_if_valid!(
            c‚Å±s, constraints‚Ä≤, # push to c‚Å±s; use constraints‚Ä≤ as an updating buffer
            ijks::NTuple{N,Int}, occupation, constraints, basis_occupations, basis, idxs
            ) where N

    Œº = _sum_fillings(ijks, basis_occupations) # accumulate band fillings
    Œº ‚â† occupation && return Œº                 # return early if Œº overflows `occupation`
    
    # update `constraints‚Ä≤`
    _update_constraints!(constraints‚Ä≤, ijks, constraints, basis, idxs)

    # check if n·µ¢+n‚±º+n‚Çñ+... fulfil constraints from `constraints`
    if all(‚â§(0), constraints‚Ä≤) # check if n·µ¢+n‚±º+n‚Çñ+... fulfill `constraints`
        add_solution!(c‚Å±s, ijks) # push a solution "i+j+k+..." to storage `c‚Å±s`
    end

    return Œº # return occupation associated with `ijks` expansion
end

# equivalent of Œº = Œºs[i] + Œºs[j] + Œºs[k] + ... for i,j,k, in ijks, recursively
_sum_fillings(ijks::NTuple{1,Int}, Œºs) = Œºs[first(ijks)]
function _sum_fillings(ijks::NTuple{N,Int}, Œºs) where N
    Œºs[first(ijks)] + _sum_fillings(Base.tail(ijks), Œºs)
end

# update constraints, assigning to `constraints‚Ä≤`
@inline function _update_constraints!(
        constraints‚Ä≤, ijks::NTuple{N,Int}, constraints, basis, idxs
    ) where N

    b = basis
    c = constraints
    c‚Ä≤ = constraints‚Ä≤
    if N == 1
        i, = ijks
        @views c‚Ä≤ .= c .- b[i][idxs]
    elseif N == 2
        i,j = ijks
        @views c‚Ä≤ .= c .- b[i][idxs] .- b[j][idxs]
    elseif N == 3
        i,j,k = ijks
        @views c‚Ä≤ .= c .- b[i][idxs] .- b[j][idxs] .- b[k][idxs]
    elseif N == 4
        i,j,k,l = ijks
        @views c‚Ä≤ .= c .- b[i][idxs] .- b[j][idxs] .- b[k][idxs] .- b[l][idxs]
    elseif N == 5
        i,j,k,l,o = ijks
        @views c‚Ä≤ .= c .- b[i][idxs] .- b[j][idxs] .- b[k][idxs] .- b[l][idxs] .- b[o][idxs]
    else # fall back to looping
        c‚Ä≤ .= c
        for ijk in ijks 
            @views c‚Ä≤ .-= b[ijk][idxs]
        end
    end
    return c‚Ä≤
end

function add_solution!(c‚Å±s::Vector{Vector{Int}}, ijks::NTuple{N, Int}) where N
    # push `ijks` to solution storage `c‚Å±s` as a vector of indices
    push!(c‚Å±s, [idx for idx in ijks])
end

# we bother to optimize this, as it can be a bottleneck; much faster than a naive 
# implementation like `sum(basis[idxs])`
function add_basis_vecs!(n, basis::AbstractVector{<:AbstractVector{<:Integer}}, idxs)
    N‚Å± ≥ ≥ = length(n)
    copy!(n, basis[first(idxs)]) # peel 1st iter & ensure invariance to n's inititialization
    @inbounds for idx in @view idxs[2:end]
        n·¥¥ = basis[idx]
        for i in 1:N‚Å± ≥ ≥
            n[i] += n·¥¥[i]
        end
    end
    return n
end
function add_basis_vecs(basis::AbstractVector{<:AbstractVector{<:Integer}}, idxs)
    n = similar(first(basis))
    return add_basis_vecs!(n, basis, idxs)
end

function coef2idxs(c::AbstractVector{<:Integer})
    N = sum(c)
    c‚Å± = Vector{Int}(undef, N)
    pos‚ÇÅ, pos‚ÇÇ, idx = 0, 0, 0
    while true
        idx  = findnext(‚â†(0), c, idx+1)
        pos‚ÇÅ = pos‚ÇÇ+1
        pos‚ÇÇ = pos‚ÇÇ+c[idx]
        c‚Å±[pos‚ÇÅ:pos‚ÇÇ] .= idx
        pos‚ÇÇ == N && break
    end
    return c‚Å±
end

function idxs2coef(c‚Å±, N_basis) # `N_basis = length(basis)`
    c = zeros(Int, N_basis)
    for i in c‚Å±
        c[i] += 1
    end
    return c
end

function isvalid_solution(
        c‚Å±::AbstractVector{<:Integer}, 
        occupation::Integer,
        constraints::AbstractVector{<:Integer}, 
        basis::AbstractVector{<:AbstractVector{<:Integer}},
        idxs::AbstractVector{<:Integer}
        )
    n = add_basis_vecs(basis, c‚Å±)
    return all(n[idxs] .‚â• constraints) && n[end] == occupation
end