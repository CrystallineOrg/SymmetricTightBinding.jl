"""
    subduced_complement(tbm::TightBindingModel{D}, sgnum·¥¥::Int; timereversal)
                                                        --> TightBindingModel{D}

Given a model `tbm` associated with a space group ``G``, determine the new, independent
tight-binding terms (i.e., the the orthogonal complement of terms) that become 
symmetry-allowed when the model's space group is reduced to a subgroup ``H ‚â§ G`` with space
group number `sgnum·¥¥` and time-reversal symmetry `timereversal`.

Practically, the function answers the question: which new tight-binding terms become allowed
if the symmetry of the model is reduced from space group ``G`` to subgroup ``H``?

## Implementation

The function computes a basis of allowed tight-binding terms in the subgroup setting ``H``
by simply restricting the constraints in ``G`` to generators in ``H``. This gives a basis
for the tight-binding terms in the subduced ``G ‚Üì H`` setting. 
The space spanned by this basis is compared to the space spanned in the original model; in
particular new terms are identified as the orthogonal complement of the spaces associated
with ``G ‚Üì H`` relative to ``G``.

## Keywords
- `timereversal::Bool`: Specifies whether time-reversal symmetry is present in the
  subgroup ``H``. By default, the presence or absence is inherited from the original model
  `tbm`. Note that `timereversal` must be "lower or equal to" the time-reversal of the
  original model.

## Example

It is well-known that the Dirac point of graphene is gapped under mirror and time-reversal
symmetry breaking. We can see this by constructing a tight-binding model first for a model
of graphene (plane group ‚ãï17) and then subducing it to a setting without mirror symmetry
(plane group ‚ãï16) and without time-reversal symmetry (`timereversal = false`). First, we
construct the tight-binding model for graphene (via the (2a|A‚ÇÅ) band representation):
```julia-repl
julia> using SymmetricTightBinding, Crystalline

julia> brs = calc_bandreps(17, Val(2); timereversal = true);

julia> cbr = @composite brs[5]

julia> tbm = tb_hamiltonian(cbr, [[0,0], [1,0]])
```
Each of the 4 terms in this model is proportional to an identity matrix at K = (1/3, 1/3).
Using `subduced_complement`, we can find the new terms that appear if we imagine lowering
the symmetry from plane group ‚ãï17 to ‚ãï16 (which has no mirror symmetry) while also removing
time-reversal symmetry.
```julia-repl
julia> Œîtbm = subduced_complement(tbm, 16; timereversal = false)
2-term 2√ó2 TightBindingModel{2} over (2b|A‚ÇÅ):
‚îå‚îÄ
1. ‚é° iùïñ(Œ¥‚ÇÅ)+iùïñ(Œ¥‚ÇÇ)+iùïñ(Œ¥‚ÇÉ)-iùïñ(Œ¥‚ÇÑ)-iùïñ(Œ¥‚ÇÖ)-iùïñ(Œ¥‚ÇÜ)  0                                          ‚é§
‚îÇ  ‚é£ 0                                          -iùïñ(Œ¥‚ÇÅ)-iùïñ(Œ¥‚ÇÇ)-iùïñ(Œ¥‚ÇÉ)+iùïñ(Œ¥‚ÇÑ)+iùïñ(Œ¥‚ÇÖ)+iùïñ(Œ¥‚ÇÜ) ‚é¶
‚îî‚îÄ (2b|A‚ÇÅ) self-term:  Œ¥‚ÇÅ=[1,0], Œ¥‚ÇÇ=[0,1], Œ¥‚ÇÉ=[-1,-1], Œ¥‚ÇÑ=-Œ¥‚ÇÅ, Œ¥‚ÇÖ=-Œ¥‚ÇÇ, Œ¥‚ÇÜ=-Œ¥‚ÇÉ
‚îå‚îÄ
2. ‚é° 0                                       ùïñ(Œ¥‚ÇÅ)+ùïñ(Œ¥‚ÇÇ)+ùïñ(Œ¥‚ÇÉ)-ùïñ(Œ¥‚Çá)-ùïñ(Œ¥‚Çà)-ùïñ(Œ¥‚Çâ) ‚é§
‚îÇ  ‚é£ ùïñ(Œ¥‚ÇÑ)+ùïñ(Œ¥‚ÇÖ)+ùïñ(Œ¥‚ÇÜ)-ùïñ(Œ¥‚ÇÅ‚ÇÄ)-ùïñ(Œ¥‚ÇÅ‚ÇÅ)-ùïñ(Œ¥‚ÇÅ‚ÇÇ)  0                                   ‚é¶
‚îî‚îÄ (2b|A‚ÇÅ) self-term:  Œ¥‚ÇÅ=[4/3,-1/3], Œ¥‚ÇÇ=[1/3,5/3], Œ¥‚ÇÉ=[-5/3,-4/3], Œ¥‚ÇÑ=-Œ¥‚ÇÅ, Œ¥‚ÇÖ=-Œ¥‚ÇÇ, Œ¥‚ÇÜ=-Œ¥‚ÇÉ, Œ¥‚Çá=[1/3,-4/3], Œ¥‚Çà=[-5/3,-1/3], Œ¥‚Çâ=[4/3,5/3], Œ¥‚ÇÅ‚ÇÄ=-Œ¥‚Çá, Œ¥‚ÇÅ‚ÇÅ=-Œ¥‚Çà, Œ¥‚ÇÅ‚ÇÇ=-Œ¥‚Çâ
```
The first of the of these terms is not diagonal at K and so opens a gap at the Dirac point:
```julia-repl
julia> Œîtbm[1](ReciprocalPoint(1/3, 1/3))
2√ó2 Matrix{ComplexF64}:
 5.19615+1.73195e-14im       0.0+0.0im
     0.0+0.0im          -5.19615+1.43774e-14im
```

### Adding symmetry-breaking terms to the original model
To build a "complete" model, with both the original and symmetry-breaking terms, use `vcat`:
```julia-repl
julia> tbm‚Ä≤ = vcat(tbm, Œîtbm); length(tbm‚Ä≤) == length(tbm) + length(Œîtbm)
true
```

## Limitations
The subgroup ``H`` must be a volume-preserving subgroup of the original group ``G``. I.e.
``H`` must be a translationen-gleiche subgroup of ``G`` (or ``G`` itself), and there must
exist a transformation from ``G`` to ``H`` that preserves volume (i.e., has
`det(t.P) == 1` for `t` denoting an element returned by Crystalline.jl's
`conjugacy_relations`).
"""
function subduced_complement(tbm::TightBindingModel{D}, sgnum·¥¥::Int; kws...) where D
    sgnum·¥≥ = num(tbm.cbr)
    gr = maximal_subgroups(sgnum·¥≥, SpaceGroup{D})
    ts = conjugacy_relations(gr, sgnum·¥≥, sgnum·¥¥)
    # note: it doesn't matter which of the conjugacy transforms we pick - we just need to
    # be able to transform the generators of H to the setting of G - in the end, we want
    # to present the results in our original setting (G), so it doesn't matter _which_ H
    # setting we imagine starting from (so long that it preserves volume)
    i = findfirst(ts) do t‚Ä≤
        det(t‚Ä≤.P) == 1
    end
    if isnothing(i)
        error("could not find a volume-preserving transformation to subgroup: ensure \
               that the groups have identical centerings")
    end
    t = ts[something(i)]  # note: `t` = (P|p) will take G to H - we want the opposite
    P·¥¥¬≤·¥≥ = inv(t.P)       # opposite transform: (P·¥¥¬≤·¥≥|p·¥¥¬≤·¥≥) = (P|p)‚Åª¬π
    p·¥¥¬≤·¥≥ = -P·¥¥¬≤·¥≥*t.p

    _gens·¥¥ = generators(sgnum·¥¥, SpaceGroup{D}) # in H setting
    gens·¥¥ = transform.(_gens·¥¥, Ref(P·¥¥¬≤·¥≥), Ref(p·¥¥¬≤·¥≥))

    return subduced_complement(tbm, gens·¥¥; kws...)
end

function subduced_complement(
    tbm::TightBindingModel{D},
    gens·¥¥::AbstractVector{SymOperation{D}};
    timereversal::Bool = first(tbm.cbr.brs).timereversal, # ‚Üê whether H has time-reversal
) where D
    timereversal·¥≥ = first(tbm.cbr.brs).timereversal
    if timereversal·¥≥ == false && timereversal == true
        error("requested subgroup `timereversal = false`, but original model was built with time-reversal present; input for H must maintain or reduce symmetry")
    end

    # we need to go through the terms of `tbm` in "groups of the same orbit" - each orbit
    # will have some coefficient basis, and it is this basis we need to compare. So first,
    # we figure out the groupings into these orbits by just looking at `tbt.block.h_orbit`
    grouped_orbits_idxs = UnitRange{Int}[]
    current_h_orbit = first(tbm.terms).block.h_orbit
    i‚ÇÅ = 1; i‚ÇÇ = 0
    for tbt in tbm.terms
        if current_h_orbit == tbt.block.h_orbit
            i‚ÇÇ += 1
        else
            push!(grouped_orbits_idxs, i‚ÇÅ:i‚ÇÇ)
            current_h_orbit = tbt.block.h_orbit
            i‚ÇÅ = i‚ÇÇ = i‚ÇÇ+1
        end
    end
    i‚ÇÇ == length(tbm.terms) && push!(grouped_orbits_idxs, i‚ÇÅ:i‚ÇÇ)

    # now we can compute a new coefficient basis in H and compare with our original basis,
    # progressing "group by group"
    complement_tbs = TightBindingTerm{D}[]
    for idxs in grouped_orbits_idxs
        tbt = tbm.terms[first(idxs)]
        tbb = tbt.block
        # first, compute basis of coefficients for new subset of generators (`gens·¥¥`)
        t‚Çê·µ¶_basis_reim·¥¥_vs = _obtain_basis_free_parameters(
            tbb.h_orbit,
            tbb.br1,
            tbb.br2,
            tbb.ordering1, 
            tbb.ordering2, 
            tbb.Mm,
            gens·¥¥,
            timereversal,
            tbt.block_ij[1] == tbt.block_ij[2], #= .diagonal_block =# 
            tbt.hermiticity == ANTIHERMITIAN,   #= .antihermitian =# 
        )
        # check output dimensions
        if length(t‚Çê·µ¶_basis_reim·¥¥_vs) < length(idxs)
            error("unexpectedly found lower-dimensional basis space for model in subduced \
                   group; unexpected and unhandled - make sure the generators are a subset \
                   of the original generators (i.e., that fewer constraints apply than \
                   originally)")
        elseif length(t‚Çê·µ¶_basis_reim·¥¥_vs) == length(idxs)
            continue # basis must then be unchanged; nothing to add for this index group
        end

        # get "original" coefficient basis in G from `tbm[idxs]
        t‚Çê·µ¶_basis_reim·¥¥ = stack(t‚Çê·µ¶_basis_reim·¥¥_vs)
        t‚Çê·µ¶_basis_reim·¥≥ = Matrix{Float64}(undef, length(tbb.t), length(idxs))
        for (n, i) in enumerate(idxs)
            tbb·µ¢ = tbm.terms[i].block
            t‚Çê·µ¶_basis_reim·¥≥[:,n] .= tbb·µ¢.t
        end

        # find the orthogonal complement of the span of `t‚Çê·µ¶_basis_reim·¥¥` relative to
        # `t‚Çê·µ¶_basis_reim·¥≥` using QR factorization (i.e., find a basis for the space that is
        # in H but not in G)
        Q·¥≥ = Matrix(qr(t‚Çê·µ¶_basis_reim·¥≥).Q) # columns of Q·¥≥ form orthonormal basis for G's coefs
        P·¥≥ = Q·¥≥ * transpose(Q·¥≥) # projection onto G space
        P·µ™·¥≥ = I - P·¥≥            # projection onto orthogonal complement of G space
        t‚Çê·µ¶_basis_reim_·¥¥·µ™·¥≥ = P·µ™·¥≥ * t‚Çê·µ¶_basis_reim·¥¥ # ortho. complement of H coefs rel. to G

        # now, extract a basis for the span of `t‚Çê·µ¶_basis_reim_·¥¥·µ™·¥≥` (vectors could be near
        # zero or simply linearly dependent): rather than using QR, we use the SVD, so we
        # can avoid picking up basis elements that are just due to accumulated (floating
        # point, e.g.) errors
        U·¥¥·µ™·¥≥, œÉs, _ = svd(t‚Çê·µ¶_basis_reim_·¥¥·µ™·¥≥) # = U*Œ£*V·µÄ w/ Œ£ = Diagonal(œÉs)
        N·¥¥ = size(t‚Çê·µ¶_basis_reim·¥¥, 2) - size(t‚Çê·µ¶_basis_reim·¥≥, 2)
        t‚Çê·µ¶_basis_reim_·¥¥·µ™·¥≥‚Ä≤ = Matrix{Float64}(undef, length(tbb.t), N·¥¥)
        for (n, (u, œÉ)) in enumerate(zip(eachcol(U·¥¥·µ™·¥≥), œÉs))
            n > N·¥¥ && continue # there should be exactly N·¥¥ non-zero singular values
            if œÉ < NULLSPACE_ATOL_DEFAULT
                # make sure we don't have any surprises & verify our assumption above
                error(LazyString("unexpectedly found near-zero singular value for a SVD \
                      column vector that ought to have been a proper basis vector (N·¥¥ = ",
                      N·¥¥, " œÉs = ", œÉs, ")"))
            end
            # keep this vector
            t‚Çê·µ¶_basis_reim_·¥¥·µ™·¥≥‚Ä≤[:,n] .= u
        end

        # finally, make the basis vectors we have now "pretty"
        t‚Çê·µ¶_basis_reim_·¥¥·µ™·¥≥‚Ä≤_sparsified = _poormans_sparsification(t‚Çê·µ¶_basis_reim_·¥¥·µ™·¥≥‚Ä≤)
        _prune_at_threshold!(eachcol(t‚Çê·µ¶_basis_reim_·¥¥·µ™·¥≥‚Ä≤_sparsified))

        # now we have the new terms - store them as `TightBindingTerm`s
        for t·¥¥·µ™·¥≥ in eachcol(t‚Çê·µ¶_basis_reim_·¥¥·µ™·¥≥‚Ä≤_sparsified)
            tbb·¥¥·µ™·¥≥ = TightBindingBlock{D}(
                tbb.br1,
                tbb.br2,
                tbb.ordering1,
                tbb.ordering2,
                tbb.h_orbit,
                tbb.Mm,
                t·¥¥·µ™·¥≥,
                tbb.diagonal_block
            )
            h = TightBindingTerm{D}(
                tbt.axis,
                tbt.block_ij,
                tbb·¥¥·µ™·¥≥, #= .block =#
                tbt.hermiticity,
                tbt.brs,
            )
            push!(complement_tbs, h)
        end
    end
    return TightBindingModel{D}(complement_tbs, tbm.cbr, tbm.positions, tbm.N)
end

