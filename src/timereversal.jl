# Now we need to take care of what is real or complex to properly apply TRS.

# the vector `t` could be multiplied by a complex number. We want now to make 
# everything real. For this, we do the following extra step to the one above:
# `Œ±t = (a + im*b)t = at + b (im*t) = [a; b] [t im*t]`
# where `Œ±‚àà‚ÑÇ` and `a,b‚àà‚Ñù`. This way we duplicate the dimensionality of the problem,
# but we keep everything real.

# NOTE: this is implemented in the code just by expanding the basis of the nullspace 
# from `{t·µ¢}·µ¢ -> {t·µ¢, im*t·µ¢}·µ¢`, so for each complex variable `Œ±` we now have two 
# real variables `a` and `b`.

# but in that way, `t‚àà‚ÑÇ`. If we want it to be real also, we can separated it into 
# its real and imaginary part in the following way: `t -> [real(t); imag(t)] = 
# [t·¥ø; t·¥µ].`

# so joining everything together, we have: Œ±t -> [a; b] [t im*t] -> 
# [a; b] [real(t) real(im*t); imag(t) imag(im*t)]

# again note that we are just expanding the basis of the nullspace in the following 
# way `{t·µ¢}·µ¢ -> {t·µ¢, im*t·µ¢}·µ¢`, so for each complex variable `Œ±` we now have two 
# real variables `a` and `b`.

# now, what happens with the irreps assuming that we are working with real numbers 
# only?

# we are going to assume for now that the transform as real irreps of the site-symmetry 
# group. TRS can be understood as a spacial symmetry when acting on the Hamiltonian:
# `D(ùíØ)H(k)D(ùíØ)‚Ä† = H(ùíØk) -> Œì(ùíØ)H*(k)Œì(ùíØ)‚Ä† = H(-k)`, where `D` is the whole 
# operator and `Œì` is only the unitary part, so `D(ùíØ) = Œì(ùíØ)ùíØ`
# If the site-symmetry irrep is real, `Œì(ùíØ) = I -> H*(k) = H(-k)`.

# we have made the following decomposition: `t -> [real(t); imag(t)]`.
# how does this affect the Hamiltonian representation?

# we have that `H·µ¢‚±º(k) = v·µÄ(k) M·µ¢‚±º t`. Then, we need to make the following change:
# `H·µ¢‚±º(k) = v·µÄ(k) [M·µ¢‚±º M·µ¢‚±º] [real(t); imag(t)]`

# Then, applying TRS will be:

# 1. `H(-k) = v·µÄ(-k) [M·µ¢‚±º M·µ¢‚±º] [real(t); imag(t)] = (Pv)·µÄ(k) [M·µ¢‚±º M·µ¢‚±º] 
# [real(t); imag(t)]`

# 2. `H*(k) = (v*)·µÄ(k) [M·µ¢‚±º M·µ¢‚±º] [real(t); -imag(t) -imag(im*t)] = (Pv)·µÄ(k) 
# [M·µ¢‚±º -M·µ¢‚±º] [real(t); imag(t)]`

# Imposing the condition `H(-k) = H*(k)` we get:
# `(Pv)·µÄ(k) [M·µ¢‚±º M·µ¢‚±º] [real(t); imag(t)] = (Pv)·µÄ(k) [M·µ¢‚±º -M·µ¢‚±º] [real(t); imag(t)]`
# which can be rewritten as:
# `(Pv)·µÄ(k) [0 2M·µ¢‚±º] [real(t); imag(t)] = 0`

# NOTE: This way of casting the problem allows us to not use the "extended" ùêØ-vector with 
# the reversed hopping in non-diagonal blocks, which could potentially enforce extra 
# symmetries in the system.

"""
    obtain_basis_free_parameters_TRS(
        h_orbit::HoppingOrbit{D}, 
        br‚Çê::NewBandRep{D}, 
        br·µ¶::NewBandRep{D}, 
        ordering‚Çê::OrbitalOrdering{D} = OrbitalOrdering(br‚Çê),
        ordering·µ¶::OrbitalOrdering{D} = OrbitalOrdering(br·µ¶),
        Mm::AbstractArray{4, Int} = construct_M_matrix(h_orbit, br‚Çê, br·µ¶, ordering‚Çê, ordering·µ¶)
        )                             --> Tuple{Array{Int,4}, Vector{Vector{ComplexF64}}}}

Obtain the basis of free parameters for the hopping terms between `br‚Çê` and `br·µ¶` associated
with the hopping orbit `h_orbit` under time-reversal symmetry.

Real and imaginary parts of the basis vectors are differentiated explicitly: internally,
we consider only variables.
"""
function obtain_basis_free_parameters_TRS(
    h_orbit::HoppingOrbit{D},
    br‚Çê::NewBandRep{D},
    br·µ¶::NewBandRep{D},
    ordering‚Çê::OrbitalOrdering{D} = OrbitalOrdering(br‚Çê),
    ordering·µ¶::OrbitalOrdering{D} = OrbitalOrdering(br·µ¶),
    Mm::AbstractArray{Int, 4} = construct_M_matrix(h_orbit, br‚Çê, br·µ¶, ordering‚Çê, ordering·µ¶),
) where {D}
    # To add time-reversal constraints, we duplicate the `M` matrix so that we can transfer
    # the conjugation from `t` to `M`. We exploit the following splitting:
    #    `H·µ¢‚±º = v·µÄ M·µ¢‚±º t = v·µÄ M·µ¢‚±º (t·¥ø + it·¥µ) = v·µÄ [M·µ¢‚±º M·µ¢‚±º] [t·¥ø; it·¥µ]`

    # Step 1: compute the Z tensor, encoding time-reversal constraints on H for the k-space
    # part. This is done by `H·µ¢‚±º(-k) = v·µÄ(-k) [M·µ¢‚±º M·µ¢‚±º] [t·¥ø; t·¥µ]`
    # `= (Pv)·µÄ(k) [M·µ¢‚±º M·µ¢‚±º] [t·¥ø; t·¥µ]`
    Z = [Mm Mm]

    # Step 2: compute the Q tensor, encoding time-reversal constraints on H for the free-
    # parameter part. This is done by `H*(k) = (v*)·µÄ(k) [M·µ¢‚±º M·µ¢‚±º] [t·¥ø; -it·¥µ]`
    # `= (Pv)·µÄ(k) [M·µ¢‚±º -M·µ¢‚±º] [t·¥ø; t·¥µ]`
    Q = [Mm -Mm]

    # Step 3: build an constraint matrix acting on the doubled hopping coefficient vector
    # `[t·¥ø; it·¥µ]` associated with `h_orbit`; each row is a constraint
    constraints = _aggregate_constraints(Q, Z)
    t‚Çê·µ¶_basis_matrix = nullspace(constraints; atol = NULLSPACE_ATOL_DEFAULT)

    return t‚Çê·µ¶_basis_matrix
end
